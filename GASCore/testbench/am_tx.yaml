################################################################################
# JSON-Testbench Configuration File
################################################################################

# Optional Meta Data #
Company: 
Engineer: 
Project_Name: 
Target_Devices: 
Tool_Versions: 
Description: 
Dependencies: 

# Required Data #
Module_Name: am_tx
Timescale: 1ns / 1ps #the default timescale of the simulation
Time_Format: {unit: "1us", precision: 3} #can be one of s, ms, us, ns, ps, fs
Flag_Count: 1

Interfaces:
  - axis

################################################################################

# DUT #
DUT:
  - {direction: input, name: ap_clk, type: clock, period: 20ns}
  - {direction: input, name: ap_rst_n}
  - {direction: output, size: 32, name: dbg_currentState}
  - {direction: slave, name: axis_kernel, type: axis, clock: ap_clk, c_struct: axis_word, c_stream: uaxis_l,
  channels: [
      {name: "TDATA", type: "tdata", size: 64},
      {name: "TVALID", type: "tvalid"},
      {name: "TREADY", type: "tready"},
      {name: "TLAST", type: "tlast"}
    ]}
  - {direction: master, name: axis_net, type: axis, clock: ap_clk, c_struct: axis_word, c_stream: uaxis_l,
  channels: [
      {name: "TDATA", type: "tdata", size: 64},
      {name: "TVALID", type: "tvalid"},
      {name: "TREADY", type: "tready"},
      {name: "TLAST", type: "tlast"}
    ]}
  - {direction: master, name: axis_mm2sCommand, type: axis, clock: ap_clk, c_struct: axis_word_mm2sCommand, c_stream: uaxis_l, 
  channels: [
      {name: "TDATA", type: "tdata", size: 64},
      {name: "TVALID", type: "tvalid"},
      {name: "TREADY", type: "tready"},
      {name: "TLAST", type: "tlast"}
    ]}
  - {direction: slave, name: axis_mm2s, type: axis, clock: ap_clk, c_struct: axis_word, c_stream: uaxis_l,
  channels: [
      {name: "TDATA", type: "tdata", size: 64},
      {name: "TVALID", type: "tvalid"},
      {name: "TREADY", type: "tready"},
      {name: "TLAST", type: "tlast"}
    ]}
  - {direction: slave, name: axis_mm2sStatus, type: axis, clock: ap_clk, c_struct: axis_word_mm2sStatus, c_stream: uaxis_l,
  channels: [
      {name: "TDATA", type: "tdata", size: 8},
      {name: "TVALID", type: "tvalid"},
      {name: "TREADY", type: "tready"},
      {name: "TLAST", type: "tlast"}
    ]}
  - {direction: output, name: release_V}

################################################################################

Initialize: &Initialize
  - wait: {key: ap_clk}
  - macro: INIT_SIGNALS
  - delay: 40ns
  - signal:
    - {name: ap_rst_n, value: 1}
    - {name: "axis_net_TREADY", value: 1}
    - {name: "axis_mm2sCommand_TREADY", value: 1}

# Short message from 0xAA to 0xCC calling handler 0xE with two handler args
Short_Message_A: &Short_Message_A
  - Parallel_Section_0: *Initialize
  - Parallel_Section_1:
    - delay: 100ns
    - timestamp: INIT
    - interface: {type: axis, name: axis_kernel, payload: [
      {tdata: "{AMHeader,0xAA,0xCC,0,0xE,1,2}", tkeep: "KEEP_ALL", callTB: 1},
      {tdata: "{AMToken,0x0}", callTB: 1},
      {tdata: 0xDEADBEEF},
      {tdata: 0x1234, tlast: 1, callTB: 2}
    ]}
  - Parallel_Section_2: # Short message goes straight through
    - interface: {type: axis, name: axis_net, payload: [
      {tdata: "{AMHeader,0xAA,0xCC,0,0xE,1,2}"},
      {tdata: "{AMToken,0x0}"},
      {tdata: 0xDEADBEEF},
      {tdata: 0x1234, tlast: 1}
    ]}
    - timestamp: Short_Message_A
    - macro: END

# Short message from 0xAA to 0xCC calling handler 0xE with no handler args
Short_Message_B: &Short_Message_B
  - Parallel_Section_0: *Initialize
  - Parallel_Section_1:
    - delay: 100ns
    - timestamp: INIT
    - interface: {type: axis, name: axis_kernel, payload: [
      {tdata: "{AMHeader,0xAA,0xCC,0,0xE,1,0}", tkeep: "KEEP_ALL", callTB: 1},
      {tdata: "{AMToken,0x1}", callTB: 2}
    ]}
  - Parallel_Section_2:
    - interface: {type: axis, name: axis_net, payload: [
      {tdata: "{AMHeader,0xAA,0xCC,0,0xE,1,0}"},
      {tdata: "{AMToken,0x1}"}
    ]}
    - timestamp: Short_Message_B
    - macro: END

# Medium message from 0xAA to 0xCC with 0x1 word of payload from FIFO. It 
# calls handler 0xE with zero handler args.
Medium_Message_A: &Medium_Message_A
  - Parallel_Section_0: *Initialize
  - Parallel_Section_1:
    - delay: 100ns
    - timestamp: INIT
    - interface: {type: axis, name: axis_kernel, payload: [
      {tdata: "{AMHeader,0xAA,0xCC,1,0xE,0x12,0}", tkeep: "KEEP_ALL", callTB: 1},
      {tdata: "{AMToken,0x2}", callTB: 1},
      {tdata: "0xDEADBEEF", tlast: 1, callTB: 2} # Payload
    ]}
  - Parallel_Section_2:
    - interface: {type: axis, name: axis_net, payload: [
      {tdata: "{AMHeader,0xAA,0xCC,1,0xE,2,0}"},
      {tdata: "{AMToken,0x2}"},
      {tdata: "0xDEADBEEF", tlast: 1}
    ]}
    - timestamp: Medium_Message_A
    - macro: END

# Medium message from 0xAA to 0xCC with 0x100 words of payload from FIFO. It 
# calls handler 0xE with six handler args.
Medium_Message_B: &Medium_Message_B
  - Parallel_Section_0: *Initialize
  - Parallel_Section_1:
    - delay: 100ns
    - timestamp: INIT
    - interface: {type: axis, name: axis_kernel, payload: [
      {tdata: "{AMHeader,0xAA,0xCC,0x100,0xE,0x12,6}", tkeep: "KEEP_ALL", callTB: 1},
      {tdata: "{AMToken,0x3}", callTB: 1},
      {loop: { start: 0, end: 5, body: [
        {tdata: "0x98765432"}
      ]}},
      {tdata: "0x98765432", callTB: 1},
      {loop: { start: 0, end: 255, body: [
        {tdata: "0xDEADBEEF"}
      ]}},
      {tdata: "0xFEEDDEED", callTB: 2, tlast: 1}
    ]}
  - Parallel_Section_2:
    - interface: {type: axis, name: axis_net, payload: [
      {tdata: "{AMHeader,0xAA,0xCC,0x100,0xE,2,6}", tkeep: "KEEP_ALL"},
      {tdata: "{AMToken,0x3}"},
      {loop: { start: 0, end: 6, body: [
        {tdata: "0x98765432"}
      ]}},
      {loop: { start: 0, end: 255, body: [
        {tdata: "0xDEADBEEF"}
      ]}},
      {tdata: "0xFEEDDEED", tlast: 1}
    ]}
    - timestamp: Medium_Message_B
    - macro: END

# Medium message from 0xAA to 0xCC with 0x1 word of payload from mem. 
# It calls handler 0xE with zero handler args.
Medium_Message_C: &Medium_Message_C
  - Parallel_Section_0: *Initialize
  - Parallel_Section_1:
    - delay: 100ns
    - timestamp: INIT
    - interface: {type: axis, name: axis_kernel, payload: [
      {tdata: "{AMHeader,0xAA,0xCC,0x1,0xE,0x2,0}", tkeep: "KEEP_ALL", callTB: 1},
      {tdata: "{AMToken,0x4}", callTB: 1},
      {tdata: 0x1000, tlast: 1, callTB: 1} # address to read
    ]}
  - Parallel_Section_2:
    - interface: {type: axis, name: axis_mm2sCommand, payload: [
      {tdata: "{dataMoverCommand,8,1,0,1,0,0x1000,0}"}
    ]}
    - interface: {type: axis, name: axis_mm2s, payload: [
      {tdata: 0xFEEDDEED, tlast: 1, callTB: 2}
    ]}
    # ? Should the status be used?
    # - interface: {type: axis, name: axis_mm2sStatus, payload: [
    #   {tdata: 0x80, callTB: 1}
    # ]}
  - Parallel_Section_3:
    - interface: {type: axis, name: axis_net, payload: [
      {tdata: "{AMHeader,0xAA,0xCC,0x1,0xE,2,0}", tkeep: "KEEP_ALL"},
      {tdata: "{AMToken,0x4}"},
      {tdata: "0xFEEDDEED", tlast: 1}
    ]}
    - timestamp: Medium_Message_C
    - macro: END

# Long message from 0xAA to 0xCC with 0x100 words of payload written to 
# dst address 0xAABBCC08. It calls handler 0xE with zero handler args.
Long_Message_A: &Long_Message_A
  - Parallel_Section_0: *Initialize
  - Parallel_Section_1:
    - delay: 100ns
    - timestamp: INIT
    - interface: {type: axis, name: axis_kernel, payload: [
      {tdata: "{AMHeader,0xAA,0xCC,0x100,0xE,0x14,0}", callTB: 1},
      {tdata: "{AMToken,0x5}", callTB: 1},
      {tdata: "0xAABBCCD8", callTB: 1}, # address
      {loop: { start: 0, end: 255, body: [
        {tdata: "0xDEADBEEF"}
      ]}},
      {tdata: "0xDEADBEEF", tlast: 1, callTB: 2}
    ]}
  - Parallel_Section_2:
    - interface: {type: axis, name: axis_net, payload: [
      {tdata: "{AMHeader,0xAA,0xCC,0x100,0xE,4,0}"},
      {tdata: "{AMToken,0x5}"},
      {tdata: "0xAABBCCD8"},
      {loop: { start: 0, end: 255, body: [
        {tdata: "0xDEADBEEF"}
      ]}},
      {tdata: "0xDEADBEEF", tlast: 1}
    ]}
    - timestamp: Long_Message_A
    - macro: END

# Long message A but from memory instead of FIFO
Long_Message_B: &Long_Message_B
  - Parallel_Section_0: *Initialize
  - Parallel_Section_1:
    - delay: 100ns
    - timestamp: INIT
    - interface: {type: axis, name: axis_kernel, payload: [
      {tdata: "{AMHeader,0xAA,0xCC,0x100,0xE,0x4,0}", callTB: 1},
      {tdata: "{AMToken,0x5}", callTB: 1},
      {tdata: "0xAABBCCD8", callTB: 1}, # source address
      {tdata: 8, callTB: 1} # destination address
    ]}
  - Parallel_Section_2:
    - interface: {type: axis, name: axis_mm2sCommand, payload: [
      {tdata: "{dataMoverCommand,0x800,1,0,1,0,0xAABBCCD8,0}"}
    ]}
    - interface: {type: axis, name: axis_mm2s, payload: [
      {loop: { start: 0, end: 255, body: [
        {tdata: "0xDEADBEEF"}
      ]}},
      {tdata: "0xDEADBEEF", callTB: 2, tlast: 1}
    ]}
  - Parallel_Section_3:
    - interface: {type: axis, name: axis_net, payload: [
      {tdata: "{AMHeader,0xAA,0xCC,0x100,0xE,4,0}"},
      {tdata: "{AMToken,0x5}"},
      {tdata: "8"},
      {loop: { start: 0, end: 255, body: [
        {tdata: "0xDEADBEEF"}
      ]}},
      {tdata: "0xDEADBEEF", tlast: 1}
    ]}
    - timestamp: Long_Message_B
    - macro: END

# Long strided message from 0xAA to 0xCC with 0xC words of payload
# across two vectors. It calls handler 0xD with two handler args. Each 
# stride is 0x100 words, and it write 4 words each time
Long_Message_C: &Long_Message_C
  - Parallel_Section_0: *Initialize
  - Parallel_Section_1:
    - delay: 100ns
    - timestamp: INIT
    - interface: {type: axis, name: axis_kernel, payload: [
      {tdata: "{AMHeader,0xAA,0xCC,0xC,0xD,0x5,2}", callTB: 1},
      {tdata: "{AMLongStride,0,0xC,1}"}, # src stride info
      {tdata: 0x200}, # src address
      {tdata: "{AMLongStride,0x100,4,3,0x5}"}, # dst stride info
      {tdata: 0, callTB: 1}, # dst address
      {tdata: "0xAABBCCDD", callTB: 0}, # handler arg 0
      {tdata: "0xDDCCBBAA", callTB: 1}, # handler arg 1
    ]}
  - Parallel_Section_2:
    - interface: {type: axis, name: axis_mm2sCommand, payload: [
      {tdata: "{dataMoverCommand,96,1,0,1,0,0x200,0}"}
    ]}
    - interface: {type: axis, name: axis_mm2s, payload: [
      {loop: { start: 0, end: 2, body: [
        {loop: { start: 0, end: 3, body: [
          {tdata: "0xBEEFDEAD"}
        ]}},
        {tdata: "0xDEADBEEF"}
      ]}},
      {loop: { start: 0, end: 3, body: [
        {tdata: "0xBEEFDEAD"}
      ]}},
      {tdata: "0xDEADBEEF", tlast: 1, callTB: 2}
    ]}
  - Parallel_Section_3:
    - interface: {type: axis, name: axis_net, payload: [
      {tdata: "{AMHeader,0xAA,0xCC,0xC,0xD,0x5,2}"},
      {tdata: "{AMLongStride,0x100,4,3,0x5}"},
      {tdata: 0}, # initial address
      {tdata: "0xAABBCCDD"}, # handler arg 0
      {tdata: "0xDDCCBBAA"}, # handler arg 1
      {loop: { start: 0, end: 2, body: [
        {loop: { start: 0, end: 3, body: [
          {tdata: "0xBEEFDEAD"}
        ]}},
        {tdata: "0xDEADBEEF"}
      ]}},
      {loop: { start: 0, end: 3, body: [
        {tdata: "0xBEEFDEAD"}
      ]}},
      {tdata: "0xDEADBEEF", tlast: 1}
    ]}
    - timestamp: Long_Message_C
    - macro: END

# Long vector message from 0xAA to 0xCC with 0x10C words of payload
# across two vectors. It calls handler 0xF with zero handler args. First 
# vector has 0xC words to address 0 and second has has 0x100 words to 
# address 0xFF00
Long_Message_D: &Long_Message_D
  - Parallel_Section_0: *Initialize
  - Parallel_Section_1:
    - delay: 100ns
    - timestamp: INIT
    - interface: {type: axis, name: axis_kernel, payload: [
      {tdata: "{AMHeader,type:0x6,src:0xAA,dst:0xCC,payload:0x10C,handler:0xF,args:0}", callTB: 1},
      {tdata: "{AMLongVector,2,2,0xC,0xC,0x8}"},
      {tdata: 0x1000}, # src address 1
      {tdata: 0}, # destination address 1
      {tdata: 0x100}, # src size 1 
      {tdata: 0xFF00}, # src address 1
      {tdata: 0x100}, # dst size 1 
      {tdata: 0xDD00, callTB: 1} # dst address 1
    ]}
  - Parallel_Section_2:
    - interface: {type: axis, name: axis_mm2sCommand, payload: [
      {tdata: "{dataMoverCommand,0x60,1,0,0,0,0x1000,0}"}
    ]}
    - interface: {type: axis, name: axis_mm2sCommand, payload: [
      {tdata: "{dataMoverCommand,0x800,1,0,1,0,0xFF00,0}"}
    ]}
    - interface: {type: axis, name: axis_mm2s, payload: [
      {loop: { start: 0, end: 2, body: [
        {loop: { start: 0, end: 3, body: [
          {tdata: "0xBEEFDEAD"}
        ]}},
        {tdata: "0xDEADBEEF"}
      ]}},
      {loop: { start: 0, end: 3, body: [
        {tdata: "0xBEEFDEAD"}
      ]}},
      {tdata: "0xDEADBEEF", tlast: 1},
      {loop: { start: 0, end: 255, body: [
        {tdata: "0xFFAAFFAA"}
      ]}},
      {tdata: "0xDDDDDDDD", tlast: 1, callTB: 2}
    ]}
  - Parallel_Section_3:
    - interface: {type: axis, name: axis_net, payload: [
      {tdata: "{AMHeader,0xAA,0xCC,0x10C,0xF,0x6,0}"},
      {tdata: "{AMLongVector,2,0xC,0x8}"},
      {tdata: 0}, # dst address 1
      {tdata: 0x100}, # dst size 2
      {tdata: 0xDD00}, # dst addr 2
      {loop: { start: 0, end: 2, body: [
        {loop: { start: 0, end: 3, body: [
          {tdata: "0xBEEFDEAD"}
        ]}},
        {tdata: "0xDEADBEEF"}
      ]}},
      {loop: { start: 0, end: 3, body: [
        {tdata: "0xBEEFDEAD"}
      ]}},
      {tdata: "0xDEADBEEF", tlast: 1},
      {loop: { start: 0, end: 255, body: [
        {tdata: "0xFFAAFFAA"}
      ]}},
      {tdata: "0xDDDDDDDD", tlast: 1}
    ]}
    - timestamp: Long_Message_D
    - macro: END

################################################################################

Wait_Conditions:
  - {condition: "wait(flags[$value]);", key: "flag"}
  - {condition: "wait(axis_mm2s_tlast == $value);", key: "axis_mm2s_tlast"}
  - {condition: "@(negedge ap_clk);", key: ap_clk}

Test_Vectors:
  # - Test_Vector_0: *Long_Message_D
  # - Test_Vector_0: *Short_Message_A
  # - Test_Vector_1: *Long_Message_B
  - Test_Vector_0: *Short_Message_A
  - Test_Vector_1: *Short_Message_B
  - Test_Vector_2: *Medium_Message_A
  - Test_Vector_3: *Medium_Message_B
  - Test_Vector_4: *Medium_Message_C
  - Test_Vector_5: *Long_Message_A
  - Test_Vector_6: *Long_Message_B
  - Test_Vector_7: *Long_Message_C
  - Test_Vector_8: *Long_Message_D
  
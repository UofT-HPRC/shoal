################################################################################
# Sonar Configuration File
################################################################################

# Optional Meta Data #
Company: 
Engineer: 
Project_Name: 
Target_Devices: 
Tool_Versions: 
Description: 
Dependencies: 

# Required Data #
Module_Name: GAScore
Timescale: 1ns / 1ps #the default timescale of the simulation
Time_Format: {unit: "1us", precision: 3} #can be one of s, ms, us, ns, ps, fs
Flag_Count: 2

################################################################################

# DUT #
DUT:
  - {direction: input, name: clock, type: clock, period: 20ns}
  - {direction: input, name: reset_n, type: reset}
  - {direction: master, name: axis_kernel_out, type: axis, clock: clock, 
  c_struct: axis_wordDest, c_stream: uaxis_m, channels: [
    {name: "tdata", type: "tdata", size: 64},
    {name: "tkeep", type: "tkeep", size: 8},
    {name: "tdest", type: "tdest", size: 16},
    {name: "tvalid", type: "tvalid"},
    {name: "tready", type: "tready"},
    {name: "tlast", type: "tlast"}
  ]}
  - {direction: slave, name: axis_kernel_in, type: axis, clock: clock, 
  c_struct: axis_word, c_stream: uaxis_l, channels: [
    {name: "tdata", type: "tdata", size: 64},
    {name: "tkeep", type: "tkeep", size: 8},
    {name: "tvalid", type: "tvalid"},
    {name: "tready", type: "tready"},
    {name: "tlast", type: "tlast"}
  ]}
  - {direction: master, name: axis_net_out, type: axis, clock: clock, 
  c_struct: axis_word, c_stream: uaxis_l, channels: [
    {name: "tdata", type: "tdata", size: 64},
    {name: "tkeep", type: "tkeep", size: 8},
    {name: "tvalid", type: "tvalid"},
    {name: "tready", type: "tready"},
    {name: "tlast", type: "tlast"}
  ]}
  - {direction: slave, name: axis_net_in, type: axis, clock: clock, 
  c_struct: axis_word, c_stream: uaxis_l, channels: [
    {name: "tdata", type: "tdata", size: 64},
    {name: "tkeep", type: "tkeep", size: 8},
    {name: "tvalid", type: "tvalid"},
    {name: "tready", type: "tready"},
    {name: "tlast", type: "tlast"}
  ]}
  - {direction: mixed, name: s_axi_ctrl_bus_0, type: s_axilite, clock: clock, reset: reset_n,
  registers: [counter_threshold, counter_reset], regAddrs: [0x10, 0x18], 
  address_range: 4K, address_offset: 0, connectionMode: ip, channels: [
    {name: AWVALID, type: awvalid},
    {name: AWREADY, type: awready},
    {name: AWADDR, type: awaddr, size: 12},
    {name: WVALID, type: wvalid},
    {name: WREADY, type: wready},
    {name: WDATA, type: wdata, size: 32},
    {name: WSTRB, type: wstrb, size: 4},
    {name: ARVALID, type: arvalid},
    {name: ARREADY, type: arready},
    {name: ARADDR, type: araddr, size: 12},
    {name: RVALID, type: rvalid},
    {name: RREADY, type: rready},
    {name: RDATA, type: rdata, size: 32},
    {name: RRESP, type: rresp, size: 2},
    {name: BVALID, type: bvalid},
    {name: BREADY, type: bready},
    {name: BRESP, type: bresp, size: 2}
  ]}
  - {direction: mixed, name: s_axi_ctrl_bus_1, type: s_axilite, clock: clock, reset: reset_n,
  registers: [counter_threshold, counter_reset], regAddrs: [0x10, 0x18], 
  address_range: 4K, address_offset: 0, connectionMode: ip, channels: [
    {name: AWVALID, type: awvalid},
    {name: AWREADY, type: awready},
    {name: AWADDR, type: awaddr, size: 12},
    {name: WVALID, type: wvalid},
    {name: WREADY, type: wready},
    {name: WDATA, type: wdata, size: 32},
    {name: WSTRB, type: wstrb, size: 4},
    {name: ARVALID, type: arvalid},
    {name: ARREADY, type: arready},
    {name: ARADDR, type: araddr, size: 12},
    {name: RVALID, type: rvalid},
    {name: RREADY, type: rready},
    {name: RDATA, type: rdata, size: 32},
    {name: RRESP, type: rresp, size: 2},
    {name: BVALID, type: bvalid},
    {name: BREADY, type: bready},
    {name: BRESP, type: bresp, size: 2}
  ]}
  - {direction: output, name: interrupt_0, size: 1}
  - {direction: output, name: interrupt_1, size: 1}

################################################################################

Initialize: &Initialize
  - wait: {key: clock}
  - macro: INIT_SIGNALS
  - delay: 40ns
  - signal:
    - {name: reset_n, value: 1}
    - {name: axis_net_out_tready, value: 1}
    - {name: axis_kernel_out_tready, value: 1}

# Sends short messages from the network that call the adder handler function
# that raises the interrupt once the set threshold is exceeded. There are two 
# kernels here. A short message calling no handler is also inserted which does 
# nothing and is just absorbed by the GAScore. All transactions result in reply
# messages sent back over the network.
Short_Message_A: &Short_Message_A
  - Parallel_Section_0: *Initialize
  - Parallel_Section_1:
    - delay: 100ns
    - timestamp: INIT
    - interface: {type: s_axilite, name: s_axi_ctrl_bus_1, payload: [
      {mode: 1, data: 0x4, addr: 0x10}, # set a threshold of 4
      {mode: 1, data: 1, addr: 0x18} # enable the counter
    ]}
    - interface: {type: axis, name: axis_net_in, payload: [
      {tdata: "{AMHeader,0x0,0x01,0,0x1,1,1}"},
      {tdata: "{AMToken,0x0}"},
      {tdata: 0x4, tlast: 1} # handler arg of 4
    ]}
    - interface: {type: axis, name: axis_net_in, payload: [
      {tdata: "{AMHeader,0x0,0x01,0,0x1,1,1}"},
      {tdata: "{AMToken,0x0}"},
      {tdata: 0x1, tlast: 1} # handler arg of 1
    ]}
    - interface: {type: s_axilite, name: s_axi_ctrl_bus_0, payload: [
      {mode: 1, data: 0x4, addr: 0x10}, # set a threshold of 4
      {mode: 1, data: 1, addr: 0x18} # enable the counter
    ]}
    - interface: {type: axis, name: axis_net_in, payload: [
      {tdata: "{AMHeader,0x0,0x01,0,0,1,0}"}, # empty handler
      {tdata: "{AMToken,0x0}", tlast: 1}
    ]}
    - interface: {type: axis, name: axis_net_in, payload: [
      {tdata: "{AMHeader,0x1,0x00,0,0x1,1,1}"},
      {tdata: "{AMToken,0x0}"},
      {tdata: 0x5, tlast: 1} # handler arg of 5
    ]}
    - wait: {key: interrupt_0, value: 1}
    - wait: {key: interrupt_1, value: 1}
    - interface: {type: s_axilite, name: s_axi_ctrl_bus_1, payload: [
      {mode: 1, data: 2, addr: 0x18}, # disable and reset the counter
      {mode: 1, data: 0, addr: 0x18} # stop resetting the counter
    ]}
    - interface: {type: s_axilite, name: s_axi_ctrl_bus_0, payload: [
      {mode: 1, data: 2, addr: 0x18}, # disable and reset the counter 
      {mode: 1, data: 0, addr: 0x18} # stop resetting the counter
    ]}
    - wait: {key: interrupt_0, value: 0}
    - wait: {key: interrupt_1, value: 0}
    - timestamp: Short_Message_A
    - macro: END

# Sends short messages from local kernels that call the adder handler function
# that raises the interrupt once the set threshold is exceeded. There are two 
# kernels here. A short message calling no handler is also inserted which does 
# nothing and is just absorbed by the GAScore. The last two transactions are 
# routed to the network since the destination is > 0xF. 
Short_Message_B: &Short_Message_B
  - Parallel_Section_0: *Initialize
  - Parallel_Section_1:
    - delay: 100ns
    - timestamp: INIT
    - interface: {type: s_axilite, name: s_axi_ctrl_bus_1, payload: [
      {mode: 1, data: 0x4, addr: 0x10}, # set a threshold of 4
      {mode: 1, data: 1, addr: 0x18} # enable the counter
    ]}
    - interface: {type: axis, name: axis_kernel_in, payload: [
      {tdata: "{AMHeader,0x0,0x01,0,0x1,1,1}"},
      {tdata: "{AMToken,0x0}"},
      {tdata: 0x4, tlast: 1} # handler arg of 4
    ]}
    - interface: {type: axis, name: axis_kernel_in, payload: [
      {tdata: "{AMHeader,0x0,0x01,0,0x1,1,1}"},
      {tdata: "{AMToken,0x0}"},
      {tdata: 0x1, tlast: 1} # handler arg of 1
    ]}
    - interface: {type: s_axilite, name: s_axi_ctrl_bus_0, payload: [
      {mode: 1, data: 0x4, addr: 0x10}, # set a threshold of 4
      {mode: 1, data: 1, addr: 0x18} # enable the counter
    ]}
    - interface: {type: axis, name: axis_kernel_in, payload: [
      {tdata: "{AMHeader,0x0,0x01,0,0,1,0}"}, # empty handler
      {tdata: "{AMToken,0x0}", tlast: 1}
    ]}
    - interface: {type: axis, name: axis_kernel_in, payload: [
      {tdata: "{AMHeader,0x1,0x00,0,0x1,1,1}"},
      {tdata: "{AMToken,0x0}"},
      {tdata: 0x5, tlast: 1} # handler arg of 5
    ]}
    - interface: {type: axis, name: axis_kernel_in, payload: [
      {tdata: "{AMHeader,0x0,0x11,0,0,1,0}"}, # empty handler to remote
      {tdata: "{AMToken,0x0}", tlast: 1}
    ]}
    - interface: {type: axis, name: axis_kernel_in, payload: [
      {tdata: "{AMHeader,0x1,0x10,0,0,1,0}"}, # empty handler to remote
      {tdata: "{AMToken,0x0}", tlast: 1}
    ]}
    - wait: {key: interrupt_0, value: 1}
    - wait: {key: interrupt_1, value: 1}
    - interface: {type: s_axilite, name: s_axi_ctrl_bus_1, payload: [
      {mode: 1, data: 2, addr: 0x18}, # disable and reset the counter
      {mode: 1, data: 0, addr: 0x18} # stop resetting the counter
    ]}
    - interface: {type: s_axilite, name: s_axi_ctrl_bus_0, payload: [
      {mode: 1, data: 2, addr: 0x18}, # disable and reset the counter 
      {mode: 1, data: 0, addr: 0x18} # stop resetting the counter
    ]}
    - wait: {key: interrupt_0, value: 0}
    - wait: {key: interrupt_1, value: 0}
    - wait: {key: "flag", value: 0}
    - flag: {clear_flag: 0}
    - interface: {type: axis, name: axis_net_in, payload: [
      {tdata: "{AMHeader,0x11,0x0,0,0,0x41,0}"}, # empty handler to remote
      {tdata: "{AMToken,0x0}", tlast: 1},
      {tdata: "{AMHeader,0x10,0x1,0,0,0x41,0}"}, # empty handler to remote
      {tdata: "{AMToken,0x0}", tlast: 1}
    ]}
  - Parallel_Section_2:
    - interface: {type: axis, name: axis_kernel_out, payload: [
      {tdata: "{AMToken,0x0,0x41}", tdest: 0, tlast: 1}, # reply to kernel
      {tdata: "{AMToken,0x0,0x41}", tdest: 0, tlast: 1}, # reply to kernel
      {tdata: "{AMToken,0x0,0x41}", tdest: 0, tlast: 1}, # reply to kernel
      {tdata: "{AMToken,0x0,0x41}", tdest: 1, tlast: 1} # reply to kernel
    ]}
    - interface: {type: axis, name: axis_net_out, payload: [
      {tdata: "{AMHeader,0x0,0x11,0,0,1,0}"}, # empty handler to remote
      {tdata: "{AMToken,0x0}", tlast: 1},
      {tdata: "{AMHeader,0x1,0x10,0,0,1,0}"}, # empty handler to remote
      {tdata: "{AMToken,0x0}", tlast: 1}
    ]}
    - flag: {set_flag: 0}
    - interface: {type: axis, name: axis_kernel_out, payload: [
      {tdata: "{AMToken,0x0,0x41}", tdest: 0, tlast: 1}, # reply to kernel
      {tdata: "{AMToken,0x0,0x41}", tdest: 1, tlast: 1} # reply to kernel
    ]}
    - timestamp: Short_Message_B
    - macro: END

# This sends a pair of medium messages: one for loopback, one externally. The 
# loopback message is  medium FIFO message which passes the token + payload to 
# the local kernel and a reply message is sent back. The remote message is 
# forwarded in its entirety out (FIFO bit is changed in the type)
Medium_Message_A: &Medium_Message_A
  - Parallel_Section_0: *Initialize
  - Parallel_Section_1:
    - delay: 100ns
    - timestamp: INIT
    - interface: {type: axis, name: axis_kernel_in, payload: [
      {tdata: "{AMHeader,0x0,0x01,2,0,0x12,0}"},
      {tdata: "{AMToken,0x0}"},
      {tdata: 0x5}, # payload arg of 5
      {tdata: 0x4, tlast: 1} # payload arg of 4
    ]}
    - interface: {type: axis, name: axis_kernel_in, payload: [
      {tdata: "{AMHeader,0x0,0x10,2,0,0x12,0}"},
      {tdata: "{AMToken,0x0}"},
      {tdata: 0x5}, # payload arg of 5
      {tdata: 0x4, tlast: 1} # payload arg of 4
    ]}
  - Parallel_Section_2:
    - interface: {type: axis, name: axis_kernel_out, payload: [
      {tdata: "{AMToken,0x0}", tdest: 1},
      {tdata: 0x5, tdest: 1}, # payload arg of 5
      {tdata: 0x4, tdest: 1, tlast: 1}, # payload arg of 4
      {tdata: "{AMToken,0x0,0x41}", tdest: 0, tlast: 1}
    ]}
  - Parallel_Section_3:
    - interface: {type: axis, name: axis_net_out, payload: [
      {tdata: "{AMHeader,0x0,0x10,2,0,0x02,0}"},
      {tdata: "{AMToken,0x0}"},
      {tdata: 0x5,}, # payload arg of 5
      {tdata: 0x4, tlast: 1} # payload arg of 4
    ]}
    - timestamp: Medium_Message_A
    - macro: END

# This sends a medium messages externally. It reads 4 words from byte address 
# 0x10 and streams it out
Medium_Message_B: &Medium_Message_B
  - Parallel_Section_0: *Initialize
  - Parallel_Section_1:
    - delay: 100ns
    - timestamp: INIT
    - interface: {type: axis, name: axis_kernel_in, payload: [
      {tdata: "{AMHeader,0x0,0x10,4,0,0x02,0}"},
      {tdata: "{AMToken,0x0}"},
      {tdata: 0x10, tlast: 1} # address of 2
    ]}
  - Parallel_Section_2:
    - interface: {type: axis, name: axis_net_out, payload: [
      {tdata: "{AMHeader,0x0,0x10,4,0,0x02,0}"},
      {tdata: "{AMToken,0x0}"},
      {tdata: 2},
      {tdata: 3},
      {tdata: 4},
      {tdata: 5, tlast: 1}
    ]}
    - timestamp: Medium_Message_B
    - macro: END

# Sends a long message reading 4 words from byte address 0x10 to be written
# to byte address 0x20. Handler 1 is also called with argument 1
Long_Message_A: &Long_Message_A
  - Parallel_Section_0: *Initialize
  - Parallel_Section_1:
    - delay: 100ns
    - timestamp: INIT
    - interface: {type: axis, name: axis_kernel_in, payload: [
      {tdata: "{AMHeader,0x0,0x10,4,1,0x04,1}"},
      {tdata: "{AMToken,0x0}"},
      {tdata: 0x10}, # src address of word 2
      {tdata: 0x20}, # dst address of word 4
      {tdata: 0x1, tlast: 1},
    ]}
  - Parallel_Section_2:
    - interface: {type: axis, name: axis_net_out, payload: [
      {tdata: "{AMHeader,0x0,0x10,4,1,0x04,1}"},
      {tdata: "{AMToken,0x0}"},
      {tdata: 0x20}, # dst address of word 4
      {tdata: 0x1},
      {tdata: 2},
      {tdata: 3},
      {tdata: 4},
      {tdata: 5, tlast: 1}
    ]}
    - timestamp: Long_Message_A
    - macro: END

# Sends a long strided message reading 4 words from address 0 with an 
# offset of 0x100 (32 words) and sent to address 0x20 remotely.
Long_Message_B: &Long_Message_B
  - Parallel_Section_0: *Initialize
  - Parallel_Section_1:
    - delay: 100ns
    - timestamp: INIT
    - interface: {type: axis, name: axis_kernel_in, payload: [
      {tdata: "{AMHeader,0x0,0x10,4,0,0x05,0}"},
      {tdata: "{AMLongStride,0x100,1,4}"},
      {tdata: 0}, # src address of word 0
      {tdata: "{AMLongStride,0x100,1,4,0xF}"},
      {tdata: 0x20, tlast: 1} # dst address of word 4
    ]}
  - Parallel_Section_2:
    - interface: {type: axis, name: axis_net_out, payload: [
      {tdata: "{AMHeader,0x0,0x10,4,0,0x05,0}"},
      {tdata: "{AMLongStride,0x100,1,4,0xF}"},
      {tdata: 0x20}, # dst address of word 4
      {tdata: 0x0},
      {tdata: 0x20},
      {tdata: 0x40},
      {tdata: 0x60, tlast: 1}
    ]}
    - timestamp: Long_Message_B
    - macro: END

Long_Message_C: &Long_Message_C
  - Parallel_Section_0: *Initialize
  - Parallel_Section_1:
    - delay: 100ns
    - timestamp: INIT
    - interface: {type: axis, name: axis_kernel_in, payload: [
      {tdata: "{AMHeader,0x0,0x10,10,0,0x06,0}"},
      {tdata: "{AMLongVector,2,2,4,4,0}"},
      {tdata: 0}, # src address for vec0
      {tdata: 0x10}, # dst address for vec0
      {tdata: 0x6}, # src size for vec1
      {tdata: 0x100}, # src addr for vec1
      {tdata: 0x6}, # dst size for vec1
      {tdata: 0x80} # dst addr for vec1
    ]}
  - Parallel_Section_2:
    - interface: {type: axis, name: axis_net_out, payload: [
      {tdata: "{AMHeader,0x0,0x10,10,0,0x06,0}"},
      {tdata: "{AMLongVector,2,4,0}"},
      {tdata: 0x10}, # dst address of vec0
      {tdata: 0x6}, # size of vec1
      {tdata: 0x80}, # dst address of vec1
      {tdata: 0},
      {tdata: 1},
      {tdata: 2},
      {tdata: 3},
      {tdata: 0x20},
      {tdata: 0x21},
      {tdata: 0x22},
      {tdata: 0x23},
      {tdata: 0x24},
      {tdata: 0x25, tlast: 1}
    ]}
    - timestamp: Long_Message_C
    - macro: END
################################################################################

Wait_Conditions:
  - {condition: "@(negedge clock);", key: clock}
  - {condition: "wait(interrupt_0 == $value)", key: interrupt_0}
  - {condition: "wait(interrupt_1 == $value)", key: interrupt_1}
  - {condition: "wait(flags[$value]);", key: "flag"}

Test_Vectors:
  - Test_Vector_0: *Short_Message_A
  - Test_Vector_1: *Short_Message_B
  - Test_Vector_2: *Medium_Message_A
  - Test_Vector_3: *Medium_Message_B
  - Test_Vector_4: *Long_Message_A
  - Test_Vector_5: *Long_Message_B
  - Test_Vector_6: *Long_Message_C
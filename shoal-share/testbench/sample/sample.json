/* User-specified JSON for testbenching

This JSON file represents an abstraction for a C or SV testbench. It defines the 
data to be sent, handshaking with waits, and the golden data to be checked 
against at the outputs. It allows the use of C-style comments and certain macros 
to make it convenient for the user to use. Python is used to parse this file 
into valid JSON, perform the macro substitutions, and generate the data files 
for the testbenches to use.

Structure

The structure of the file is as follows:
  | [array of test vectors]
    | [array of parallel sections]
      | [array of sequential commands]
  
  A test vector represents a complete testbench with inputs and outputs that can 
  be verified independently. Each test vector may check different use cases of 
  the DUT. Each test vector is made up of one or more parallel sections. Each 
  parallel section, as its name suggests, can be done in parallel in a SV 
  testbench. In a CSim, this parallel aspect is ignored and all commands are run 
  through sequentially. Each parallel section is made up of one or more 
  sequential commands (respective to each other).

Commands

A sequential command is must be one of the following or a loop [see loops]:

  Delay: used to indicate a timed delay in SV testbenches
    "type": "delay", "interface": "ns", "value": A, "id": B
    A: an integer for the time
    B: an optional string to ID this command (may be useful for debugging)
    At this time, only "ns" is supported but other scales may be added later

  Axis: used to represent an AXI-S transaction on a particular interface
    "type": "axis", "interface": A, "width": B, "id": C,
    "payload": [
      ...
    ]
    A: string used as a key to identify which axis interface is used
    B: integer for the width of the AXI-S data port in bits
    C: (see B in delay)
    The payload consists of one or more entries of the following type:
      {"data": D,"keep": E,"last": F,"callTB": G}
      D: the value of the data port. This may be a decimal number, a hex string 
        (must be prefixed with 0x), a binary string (must be prefixed with 0b), 
        an implicit or explict named type (see strToInt function in utilities.py 
        to define new types), or a special debug string for CSim (defined in 
        extractNumber function in utilities.py). These debug/control macros must 
        be defined in the CSim testbench if used.
          0sdbgContinue: dummy command used to call the test bench
          0sdbgPrint: used to print the number of packets in each AXIS interface
          0sdbgState: used to print the current state variable
        Named types have the following form:
          Implicit: {AMHeader,0xAA,0xCC,0x10C,0xF,0x6,0}
            The first argument is the ID and the remainder are the arguments. 
            Each argument is bit shifted and concatenated as defined in strToInt 
            based on the ID implicitly (therefore the order matters)
          Explicit: {AMHeader,type:0x6,src:0xAA,dst:0xCC,payload:0x10C,handler:0xF,args:0}
            The first argument is the ID and the remainder are the arguments. 
            Each argument is bit shifted and concatenated as defined in strToInt 
            The key for each argument is specified and so is order independent.
      E: the value of the keep port. This may be a decimal number, a hex string 
        (must be prefixed with 0x), a binary string (must be prefixed with 0b), 
        or the string "ALL" to automatically use the width key to infer the keep 
        value to keep all the bytes.
      F: the value of the last port. This must be 0 or 1
      G: Whether the testbench function should be called after this command or 
        not. This must be 0 or 1 (1 calls the testbench)
  
  Wait: used to represent a wait condition
    "type": "wait", "interface": A, "value": B, "id": C
    A: a string used as a key to identify the wait condition
    B: integer used as an argument for the wait //TODO parse other arg types
    C: (see B in delay)

  End: ends the test vector
    "type": "end", "interface": A, "value": 0, "id": B
    A: string used as a key to identify the vector
    B: (see B in delay) //TODO redundant with interface in this case?

  Signal: used to set a signal to a value
    "type": "signal", "interface": A, "value": B, "id": C
    A: a string used as a key to identify the signal
    B: integer used as an argument for the signal //TODO parse other arg types
    C: (see B in delay)

Loops

  Loops can be used around sequential commands or within the payload array of an 
  axis type command. Loops can also be nested. Note the index key is unused and 
  may be removed in the future. For commands in loops within the payload array, 
  omit the ID field. It is added programatically based on the parent ID field 
  when the loop is expanded. Examples:
    
    "type": "axis", "interface": "axis_s2mm", "width": 32, "id": "LMC-O-P1-",
    "payload": [
      {"loop": { "start": 0, "end": 2, "index": "i", "body": [
        {"loop": { "start": 0, "end": 3, "index": "j", "body": [
          {"data": "0xBEEFDEAD","keep": "ALL","last": 0,"callTB": 0}
        ]}},
        {"data": "0xDEADBEEF","keep": "ALL","last": 0,"callTB": 0}
      ]}}
    ]

    {"loop": { "start": 0, "end": 3, "index": "j", "body": [
      {
        "type": "delay", "interface": "ns", "value": 100, "id": "Delay-1-"
      }
    ]}}
*/

{
  "data": [
    /* Each object in this array represents a different test vector. Each vector 
    is independent with respect to each other and are run through sequentially*/
    {
      "data": [
        /* Each object in this array represents a different parallel group. Each 
        object here is done in parallel*/
        {
          "data": [
            /* Each object in this array represents a sequential action.*/
            {
              "type": "delay", "interface": "ns", "value": 100, "id": "Delay-1-"
            },{
              "type": "axis", "interface": "axis_input", "width": 32, "id": "Input-1-",
              "payload": [
                {"data": "0xABCD","keep": "ALL","last": 0,"callTB": 1}
              ]
            },{
              "type": "wait", "interface": "ack", "value": 1, "id": "Wait-1-"
            },{
              "type": "axis", "interface": "axis_input", "width": 32, "id": "Input-2-",
              "payload": [
                {"data": "0sdbgContinue","keep":0,"last":0,"callTB":1},
                {"data": "0x0000","keep": "ALL","last": 0,"callTB": 1}
              ]
            },{
              "type": "wait", "interface": "ack", "value": 1, "id": "Wait-2-"
            },{
              "type": "axis", "interface": "axis_input", "width": 32, "id": "Input-3-",
              "payload": [
                {"data": "0sdbgContinue","keep":0,"last":0,"callTB":1}
              ]
            }           
          ]
        },{
          "data": [
            {
              "type": "axis", "interface": "axis_output", "width": 32, "id": "Output-1-",
              "payload": [
                {"data": "0sdbgContinue","keep":0,"last":0,"callTB":1},
                {"data": "0x0001","keep": "ALL","last": 0,"callTB": 0}
              ]
            },{
              "type": "end", "interface": "vector0", "value": 0, "id": "End"
            }
          ]
        },{
          "data": [
            {
              "type": "signal", "interface": "rst_n", "value": 0, "id": "Reset-1-"
            },{
              "type": "delay", "interface": "ns", "value": 50, "id": "Delay-1-"
            },{
              "type": "signal", "interface": "rst_n", "value": 1, "id": "Reset-1-"
            }
          ]
        }
      ]
    },{
      "data": [
        {
          "data": [
            {
              "type": "axis", "interface": "axis_input", "width": 32, "id": "Input-1-",
              "payload": [
                {"data": "0xABCD","keep": "ALL","last": 0,"callTB": 1}
              ]
            },{
              "type": "wait", "interface": "ack", "value": 1, "id": "Wait-1-"
            },{
              "type": "axis", "interface": "axis_input", "width": 32, "id": "Input-2-",
              "payload": [
                {"data": "0sdbgContinue","keep":0,"last":0,"callTB":1},
                {"data": "0x0000","keep": "ALL","last": 0,"callTB": 1}
              ]
            },{
              "type": "wait", "interface": "ack", "value": 1, "id": "Wait-2-"
            },{
              //TODO make new type for debug / control statements
              "type": "axis", "interface": "axis_input", "width": 32, "id": "Input-3-",
              "payload": [
                {"data": "0sdbgContinue","keep":0,"last":0,"callTB":1}
              ]
            }           
          ]
        },{
          "data": [
            {
              "type": "axis", "interface": "axis_output", "width": 32, "id": "Output-1-",
              "payload": [
                {"data": "0sdbgContinue","keep":0,"last":0,"callTB":1},
                {"data": "0x0001","keep": "ALL","last": 0,"callTB": 0}
              ]
            },{
              "type": "end", "interface": "vector1", "value": 1, "id": "End"
            }
          ]
        }
      ]
    }
  ]
}